(function(){var applicationServerKey='BNIcExkXUi9ypMuLvYTiVLqrWKQkMW70hxx5g3V7mU03yc9lRMqubL0H37M9z_SlE-T_lVBMNxPPOpxtoiOrAo8';var debug=false;var register=true;var unregister=false;var update=false;var version='1902041022';var path='/sw.js?v='+version;var versionKey='swVersion';var resubscribeKey='swResubscribe';var pushSettings=document.querySelector('.push-settings');var pushToggle=document.querySelector('#push-btn');var pushSubscriptionSettingsUrl='/settings/push-subscription';var storage=window.localStorage||window.localStorageFallback;var state={registration:null,subscription:null,version:storage.getItem(versionKey),init:false};updateUIState('unknown');if('serviceWorker'in navigator){log('Service worker is supported');if('PushManager'in window){log('Push is supported');}else{log('Push is not supported');}
log('Service worker version',state.version);if(state.version!==version){log('Service worker update found',state.version,version);unregister=true;}
navigator.serviceWorker.getRegistrations().then(function(regs){log('Service worker registrations',regs);var promises=[];for(var reg of regs){if(unregister){var promise=new Promise(function(resolve,reject){if('PushManager'in window){reg.pushManager.getSubscription().then(function(subscription){if(subscription!==null){storage.setItem(resubscribeKey,JSON.stringify(true));log('Unregistering registration with existing push subscription');}
resolve();});}else{resolve();}});promise.then(function(){return reg.unregister().then(function(success){if(success){log('Service worker is unregistered');}else{log('Service worker unregistration error',reg);}});});promises.push(promise);}else if(update){reg.update();log('Service worker is updated',reg);}}
return Promise.all(promises);}).then(function(){if(register){navigator.serviceWorker.register(path).then(function(reg){log('Service worker is registered',reg);state.registration=reg;var serviceWorker;if(reg.installing){serviceWorker=reg.installing;log('Service worker installing');}else if(reg.waiting){serviceWorker=reg.waiting;log('Service worker waiting');}else if(reg.active){serviceWorker=reg.active;log('Service worker active');}else{log('Service worker not found');}
if(serviceWorker){log("Service worker state:",serviceWorker.state);serviceWorker.addEventListener("statechange",function(e){log("Service worker state change:",e.target.state);if(e.target.state==="activated"){init();}});if(serviceWorker.state==="activated"){init();}}}).catch(function(err){log('Service worker registration error:',err);});}});}else{log('Service worker is not supported');updateUIState('unsupported');}
function init(){if(state.init){return;}
state.init=true;log('Init');if(state.version!==version){log('Update service worker version',state.version,version);state.version=version;storage.setItem(versionKey,version);}
if('PushManager'in window){if(pushToggle){pushToggle.addEventListener('change',function(){pushToggle.disabled=true;if(state.subscription){unsubscribeUser();}else{subscribeUser();}});}
if(JSON.parse(storage.getItem(resubscribeKey))){log('Resubscribing');subscribeUser();}else{state.registration.pushManager.getSubscription().then(function(subscription){state.subscription=subscription!==null;if(state.subscription){log('User is subscribed (init state)');}else{log('User is not subscribed (init state)');}
updateSubscriptionOnServer(subscription);updateUI();});}}else{updateUIState('unsupported');}}
function updateUI(){log('Update UI');if(!pushSettings||!pushToggle){log('UI not found');return;}
if(Notification.permission==='denied'){updateUIState('blocked');}else if(state.subscription){pushToggle.checked=true;updateUIState('enabled');}else{pushToggle.checked=false;updateUIState('disabled');}
pushToggle.disabled=false;}
function updateUIState(state){if(!pushSettings){return;}
var prefix='push-state-';var targetClassName=prefix+state;var classList=pushSettings.classList;for(var i=0;i<classList.length;i++){var className=classList[i];if(className===targetClassName){continue;}
if(className.indexOf(prefix)===0){classList.remove(className);}}
classList.add(targetClassName);pushSettings.dispatchEvent(new Event('pushStateUpdate',{bubbles:false,cancelable:true}));}
function subscribeUser(){log('Subscribe user');updateUIState('unknown');state.registration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:urlBase64ToUint8Array(applicationServerKey)}).then(function(subscription){log('User is subscribed');updateSubscriptionOnServer(subscription);storage.setItem(resubscribeKey,JSON.stringify(false));state.subscription=true;updateUI();}).catch(function(err){log('User subscribing error:',err);updateUI();});}
function unsubscribeUser(){log('Unsubscribe user');updateUIState('unknown');var existing=null;state.registration.pushManager.getSubscription().then(function(subscription){if(subscription){existing=subscription;return subscription.unsubscribe();}}).catch(function(error){log('User unsubscribing error:',error);}).then(function(){updateSubscriptionOnServer(null,existing);log('User is unsubscribed');state.subscription=false;updateUI();});}
function updateSubscriptionOnServer(subscription,existing){log('Update subscription on server',subscription,existing);if(!subscription&&!existing){log('Update subscription on server skipped');return;}
return fetch(pushSubscriptionSettingsUrl,{method:'POST',headers:{'Content-Type':'application/json','X-CSRF-Token':document.querySelector('meta[name="csrf-token"]').content},body:JSON.stringify({to:subscription,from:existing}),credentials:"same-origin"}).then(function(response){if(!response.ok){log('Updating subscription on server error (response)',response);}
return response.json();}).then(function(responseData){if(!(responseData&&responseData.success)){log('Updating subscription on server error (status)',responseData);}else{log('Subscription successfully updated on server',responseData);}}).catch(function(){log('Updating subscription on server error (catch)',arguments);});}
function log(){if(debug){var data=[].slice.call(arguments);data.unshift('[Service worker]');console.log(...data);}}
function urlBase64ToUint8Array(base64String){var padding='='.repeat((4-base64String.length%4)%4);var base64=(base64String+padding).replace(/\-/g,'+').replace(/_/g,'/');var rawData=window.atob(base64);var outputArray=new Uint8Array(rawData.length);for(var i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}
return outputArray;}})();;